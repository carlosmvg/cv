<core:FragmentDefinition
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns:mdc="sap.ui.mdc"
	xmlns:mdcTable="sap.ui.mdc.table"
	xmlns="sap.m"
	xmlns:core="sap.ui.core"
	xmlns:macro="sap.fe.macros"
	template:require="{
		FIELD: 'sap/fe/macros/field/FieldHelper',
		TABLE: 'sap/fe/macros/table/TableHelper',
		ID: 'sap/fe/core/helpers/StableIdHelper',
		CORE: 'sap/fe/core/AnnotationHelper',
		MODEL: 'sap/ui/model/odata/v4/AnnotationHelper'
	}"
	xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
> 
	<template:if
		test="{= (${dataField>$Type}.indexOf('DataFieldForAnnotation') > -1) &amp;&amp; (${dataField>Target/$AnnotationPath}.indexOf('@com.sap.vocabularies.UI.v1.Chart') > -1)}"
	>
		<template:then>
			<template:with path="dataField>Target/$AnnotationPath" var="collection" helper="MODEL.resolve$Path">
				<template:with path="collection>" var="collection" helper="CORE.getNavigationContext">
					<macro:MicroChart collection="{collection>}" chartAnnotation="{dataField>Target/$AnnotationPath/}" renderLabels="false" size="XS" />
				</template:with>
			</template:with>
		</template:then>
		<template:elseif
			test="{= (${dataField>$Type}.indexOf('DataFieldForAnnotation') > -1) &amp;&amp; (${dataField>Target/$AnnotationPath}.indexOf('FieldGroup') > -1)}"
		>
				<VBox>
					<template:with path="dataField>Target/$AnnotationPath/Data/" var="dataFieldCollections">
						<template:repeat list="{dataFieldCollections>}" var="fieldGroupDataField">
							<macro:Field
							editMode="{= ${this>editMode} ? ${this>editMode} : 'Display'}"
							createMode="{this>createMode}"
							idPrefix="{= ID.generate([${this>id}, ${fieldGroupDataField>}]) }"
							vhIdPrefix="{= ID.generate([${this>id}, 'TableValueHelp']) }"
							entitySet="{collection>}"
							dataField="{fieldGroupDataField>}"
							onCallAction="{= ${this>onCallAction} ? ${this>onCallAction} : null}"
							parentControl="Table"
							wrap="{= ${this>tableType} === 'ResponsiveTable' ? true : false }"
							semanticKeyStyle="{= ${this>tableType} === 'ResponsiveTable' ? 'ObjectIdentifier' : 'Label' }"
							class="{= TABLE.getMarginClass( ${dataFieldCollections>}  , ${fieldGroupDataField>} , ${fieldGroupDataField>Target/$AnnotationPath/Visualization/$EnumMember}) }"
							onChange="{= ${this>onChange}}"
							onDataFieldForIBN="{= ${this>onDataFieldForIBN} ? ${this>onDataFieldForIBN} : null}"
							ariaLabelledBy="{= TABLE.getColumnStableId(${this>id},${dataField>}) }"
							navigateAfterAction="{column>isNavigable}"
						/>

						</template:repeat>
					</template:with>
				</VBox>
			</template:elseif>
			<template:else>
				<macro:Field
				editMode="{= ${dataField>Value/$Path@Org.OData.Core.V1.Immutable} === true ? 'Display' : (${this>editMode} ? ${this>editMode} : 'Display')}"
				createMode="{this>createMode}"
				idPrefix="{= ID.generate([${this>id}, ${dataField>}]) }"
				vhIdPrefix="{= ID.generate([${this>id}, 'TableValueHelp']) }"
				entitySet="{collection>}"
				dataField="{dataField>}"
				onCallAction="{= ${this>onCallAction} ? ${this>onCallAction} : null}"
				onDataFieldForIBN="{= ${this>onDataFieldForIBN} ? ${this>onDataFieldForIBN} : null}"
				parentControl="Table"
				wrap="{= ${this>tableType} === 'ResponsiveTable' ? true : false }"
				semanticKeyStyle="{= ${this>tableType} === 'ResponsiveTable' ? 'ObjectIdentifier' : 'Label' }"
				onChange="{= ${this>onChange}}"
				navigateAfterAction="{column>isNavigable}"
			/>
			<template:if test="{= ${this>creationMode} === 'CreationRow'}">
				<mdcTable:creationTemplate>
					<!-- the creation row shall use the form visualization (to be checked with UX)-->
					<macro:Field
						editMode="{this>editMode}"
						createMode="{this>createMode}"
						idPrefix="{= ID.generate([${this>id}, 'CreationRow', ${dataField>}]) }"
						vhIdPrefix="{= ID.generate([${this>id}, 'TableValueHelp']) }"
						entitySet="{collection>}"
						dataField="{dataField>}"
						parentControl="CreationRow"
						wrap="{= ${this>tableType} === 'ResponsiveTable' ? true : false }"
						semanticKeyStyle="{= ${this>tableType} === 'ResponsiveTable' ? 'ObjectIdentifier' : 'Label' }"
						onChange="{= ${this>onChange}}"
						creationRowContextPath="{this>navigationPath}"
					/>
					</mdcTable:creationTemplate>
				</template:if>
			</template:else>
	</template:if>

</core:FragmentDefinition>
