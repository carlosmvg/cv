sap.ui.define(["sap/base/util/merge"], function (merge) {
  "use strict";

  var _exports = {};
  var SectionType;

  (function (SectionType) {
    SectionType["Default"] = "Default";
    SectionType["XMLFragment"] = "XMLFragment";
  })(SectionType || (SectionType = {}));

  _exports.SectionType = SectionType;
  var ActionType;

  (function (ActionType) {
    ActionType["DataFieldForAction"] = "ForAction";
    ActionType["DataFieldForIntentBasedNavigation"] = "ForNavigation";
    ActionType["Default"] = "Default";
    ActionType["Primary"] = "Primary";
    ActionType["Secondary"] = "Secondary";
    ActionType["DefaultApply"] = "DefaultApply";
  })(ActionType || (ActionType = {}));

  _exports.ActionType = ActionType;
  var VisualizationType;

  (function (VisualizationType) {
    VisualizationType["Table"] = "Table";
    VisualizationType["Chart"] = "Chart";
  })(VisualizationType || (VisualizationType = {}));

  _exports.VisualizationType = VisualizationType;
  var VariantManagementType;

  (function (VariantManagementType) {
    VariantManagementType["Page"] = "Page";
    VariantManagementType["Control"] = "Control";
    VariantManagementType["None"] = "None";
  })(VariantManagementType || (VariantManagementType = {}));

  _exports.VariantManagementType = VariantManagementType;
  var CreationMode;
  /**
   * @typedef BaseManifestSettings
   */

  (function (CreationMode) {
    CreationMode["NewPage"] = "NewPage";
    CreationMode["Inline"] = "Inline";
    CreationMode["CreationRow"] = "CreationRow";
  })(CreationMode || (CreationMode = {}));

  _exports.CreationMode = CreationMode;
  var SelectionMode;

  (function (SelectionMode) {
    SelectionMode["Auto"] = "Auto";
    SelectionMode["None"] = "None";
    SelectionMode["Multi"] = "Multi";
    SelectionMode["Single"] = "Single";
  })(SelectionMode || (SelectionMode = {}));

  _exports.SelectionMode = SelectionMode;

  /**
   * Create a wrapper object that ensure consistent return data from the manifest and that will take care of merging the different manifest "sauce".
   *
   * @param {BaseManifestSettings} oManifestSettings the manifest settings for the current page
   * @returns {ManifestWrapper} the manifest wrapper object
   */
  function createManifestWrapper(oManifestSettings) {
    return {
      getHeaderFacets: function () {
        var _oManifestSettings$co, _oManifestSettings$co2, _content, _content$header;

        return merge({}, (_oManifestSettings$co = oManifestSettings.controlConfiguration) === null || _oManifestSettings$co === void 0 ? void 0 : (_oManifestSettings$co2 = _oManifestSettings$co["@com.sap.vocabularies.UI.v1.HeaderFacets"]) === null || _oManifestSettings$co2 === void 0 ? void 0 : _oManifestSettings$co2.facets, (_content = oManifestSettings.content) === null || _content === void 0 ? void 0 : (_content$header = _content.header) === null || _content$header === void 0 ? void 0 : _content$header.facets);
      },
      getHeaderActions: function () {
        var _oManifestSettings$co3, _oManifestSettings$co4;

        return ((_oManifestSettings$co3 = oManifestSettings.content) === null || _oManifestSettings$co3 === void 0 ? void 0 : (_oManifestSettings$co4 = _oManifestSettings$co3.header) === null || _oManifestSettings$co4 === void 0 ? void 0 : _oManifestSettings$co4.actions) || {};
      },
      getFooterActions: function () {
        var _oManifestSettings$co5, _oManifestSettings$co6;

        return ((_oManifestSettings$co5 = oManifestSettings.content) === null || _oManifestSettings$co5 === void 0 ? void 0 : (_oManifestSettings$co6 = _oManifestSettings$co5.footer) === null || _oManifestSettings$co6 === void 0 ? void 0 : _oManifestSettings$co6.actions) || {};
      },
      getVariantManagement: function () {
        return oManifestSettings.variantManagement || VariantManagementType.None;
      },
      getControlConfiguration: function (sAnnotationPath) {
        var _oManifestSettings$co7;

        return (oManifestSettings === null || oManifestSettings === void 0 ? void 0 : (_oManifestSettings$co7 = oManifestSettings.controlConfiguration) === null || _oManifestSettings$co7 === void 0 ? void 0 : _oManifestSettings$co7[sAnnotationPath]) || {};
      },
      getNavigationConfiguration: function (navigationOrCollectionName) {
        var _oManifestSettings$na;

        return (oManifestSettings === null || oManifestSettings === void 0 ? void 0 : (_oManifestSettings$na = oManifestSettings.navigation) === null || _oManifestSettings$na === void 0 ? void 0 : _oManifestSettings$na[navigationOrCollectionName]) || {};
      },
      getSections: function () {
        var _oManifestSettings$co8, _oManifestSettings$co9, _content2, _content2$body;

        return merge({}, (_oManifestSettings$co8 = oManifestSettings.controlConfiguration) === null || _oManifestSettings$co8 === void 0 ? void 0 : (_oManifestSettings$co9 = _oManifestSettings$co8["@com.sap.vocabularies.UI.v1.Facets"]) === null || _oManifestSettings$co9 === void 0 ? void 0 : _oManifestSettings$co9.sections, (_content2 = oManifestSettings.content) === null || _content2 === void 0 ? void 0 : (_content2$body = _content2.body) === null || _content2$body === void 0 ? void 0 : _content2$body.sections);
      },
      isHeaderEditable: function () {
        return oManifestSettings.editableHeaderContent;
      },
      getViewConfiguration: function () {
        return oManifestSettings.views;
      },
      getViewLevel: function () {
        return (oManifestSettings === null || oManifestSettings === void 0 ? void 0 : oManifestSettings.viewLevel) || -1;
      },
      isFclEnabled: function () {
        return !!(oManifestSettings === null || oManifestSettings === void 0 ? void 0 : oManifestSettings.fclEnabled);
      }
    };
  }

  _exports.createManifestWrapper = createManifestWrapper;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1hbmlmZXN0U2V0dGluZ3MudHMiXSwibmFtZXMiOlsiU2VjdGlvblR5cGUiLCJBY3Rpb25UeXBlIiwiVmlzdWFsaXphdGlvblR5cGUiLCJWYXJpYW50TWFuYWdlbWVudFR5cGUiLCJDcmVhdGlvbk1vZGUiLCJTZWxlY3Rpb25Nb2RlIiwiY3JlYXRlTWFuaWZlc3RXcmFwcGVyIiwib01hbmlmZXN0U2V0dGluZ3MiLCJnZXRIZWFkZXJGYWNldHMiLCJtZXJnZSIsImNvbnRyb2xDb25maWd1cmF0aW9uIiwiZmFjZXRzIiwiY29udGVudCIsImhlYWRlciIsImdldEhlYWRlckFjdGlvbnMiLCJhY3Rpb25zIiwiZ2V0Rm9vdGVyQWN0aW9ucyIsImZvb3RlciIsImdldFZhcmlhbnRNYW5hZ2VtZW50IiwidmFyaWFudE1hbmFnZW1lbnQiLCJOb25lIiwiZ2V0Q29udHJvbENvbmZpZ3VyYXRpb24iLCJzQW5ub3RhdGlvblBhdGgiLCJnZXROYXZpZ2F0aW9uQ29uZmlndXJhdGlvbiIsIm5hdmlnYXRpb25PckNvbGxlY3Rpb25OYW1lIiwibmF2aWdhdGlvbiIsImdldFNlY3Rpb25zIiwic2VjdGlvbnMiLCJib2R5IiwiaXNIZWFkZXJFZGl0YWJsZSIsImVkaXRhYmxlSGVhZGVyQ29udGVudCIsImdldFZpZXdDb25maWd1cmF0aW9uIiwidmlld3MiLCJnZXRWaWV3TGV2ZWwiLCJ2aWV3TGV2ZWwiLCJpc0ZjbEVuYWJsZWQiLCJmY2xFbmFibGVkIl0sIm1hcHBpbmdzIjoiOzs7O01BS1lBLFc7O2FBQUFBLFc7QUFBQUEsSUFBQUEsVztBQUFBQSxJQUFBQSxXO0tBQUFBLFcsS0FBQUEsVzs7O01BS0FDLFU7O2FBQUFBLFU7QUFBQUEsSUFBQUEsVTtBQUFBQSxJQUFBQSxVO0FBQUFBLElBQUFBLFU7QUFBQUEsSUFBQUEsVTtBQUFBQSxJQUFBQSxVO0FBQUFBLElBQUFBLFU7S0FBQUEsVSxLQUFBQSxVOzs7TUFTQUMsaUI7O2FBQUFBLGlCO0FBQUFBLElBQUFBLGlCO0FBQUFB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QUE5Q0ssS0FBUDtBQWdEQSIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlndXJhYmxlUmVjb3JkLCBQb3NpdGlvbiwgUG9zaXRpb25hYmxlIH0gZnJvbSBcIi4vaGVscGVycy9Db25maWd1cmFibGVPYmplY3RcIjtcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSBcInNhcC9iYXNlL3V0aWxcIjtcbmltcG9ydCB7IEZsZXhTZXR0aW5ncywgSGVhZGVyRmFjZXRUeXBlIH0gZnJvbSBcInNhcC9mZS9jb3JlL2NvbnZlcnRlcnMvY29udHJvbHMvT2JqZWN0UGFnZS9IZWFkZXJGYWNldFwiO1xuaW1wb3J0IHsgQmluZGluZ0V4cHJlc3Npb24gfSBmcm9tIFwic2FwL2ZlL2NvcmUvaGVscGVycy9CaW5kaW5nRXhwcmVzc2lvblwiO1xuXG5leHBvcnQgZW51bSBTZWN0aW9uVHlwZSB7XG5cdERlZmF1bHQgPSBcIkRlZmF1bHRcIiwgLy8gVEJEXG5cdFhNTEZyYWdtZW50ID0gXCJYTUxGcmFnbWVudFwiXG59XG5cbmV4cG9ydCBlbnVtIEFjdGlvblR5cGUge1xuXHREYXRhRmllbGRGb3JBY3Rpb24gPSBcIkZvckFjdGlvblwiLFxuXHREYXRhRmllbGRGb3JJbnRlbnRCYXNlZE5hdmlnYXRpb24gPSBcIkZvck5hdmlnYXRpb25cIixcblx0RGVmYXVsdCA9IFwiRGVmYXVsdFwiLFxuXHRQcmltYXJ5ID0gXCJQcmltYXJ5XCIsXG5cdFNlY29uZGFyeSA9IFwiU2Vjb25kYXJ5XCIsXG5cdERlZmF1bHRBcHBseSA9IFwiRGVmYXVsdEFwcGx5XCJcbn1cblxuZXhwb3J0IGVudW0gVmlzdWFsaXphdGlvblR5cGUge1xuXHRUYWJsZSA9IFwiVGFibGVcIixcblx0Q2hhcnQgPSBcIkNoYXJ0XCJcbn1cblxuZXhwb3J0IGVudW0gVmFyaWFudE1hbmFnZW1lbnRUeXBlIHtcblx0UGFnZSA9IFwiUGFnZVwiLFxuXHRDb250cm9sID0gXCJDb250cm9sXCIsXG5cdE5vbmUgPSBcIk5vbmVcIlxufVxuXG5leHBvcnQgZW51bSBDcmVhdGlvbk1vZGUge1xuXHROZXdQYWdlID0gXCJOZXdQYWdlXCIsXG5cdElubGluZSA9IFwiSW5saW5lXCIsXG5cdENyZWF0aW9uUm93ID0gXCJDcmVhdGlvblJvd1wiXG59XG5cbi8qKlxuICogQHR5cGVkZWYgQmFzZU1hbmlmZXN0U2V0dGluZ3NcbiAqL1xuZXhwb3J0IHR5cGUgQmFzZU1hbmlmZXN0U2V0dGluZ3MgPSB7XG5cdGNvbnRlbnQ/OiB7XG5cdFx0aGVhZGVyPzoge1xuXHRcdFx0ZmFjZXRzPzogQ29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0SGVhZGVyRmFjZXQ+O1xuXHRcdFx0YWN0aW9ucz86IENvbmZpZ3VyYWJsZVJlY29yZDxNYW5pZmVzdEFjdGlvbj47XG5cdFx0fTtcblx0XHRmb290ZXI/OiB7XG5cdFx0XHRhY3Rpb25zPzogQ29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0QWN0aW9uPjtcblx0XHR9O1xuXHR9O1xuXHRjb250cm9sQ29uZmlndXJhdGlvbj86IHtcblx0XHRbYW5ub3RhdGlvblBhdGg6IHN0cmluZ106IENvbnRyb2xNYW5pZmVzdENvbmZpZ3VyYXRpb247XG5cdH0gJiB7XG5cdFx0XCJAY29tLnNhcC52b2NhYnVsYXJpZXMuVUkudjEuRmFjZXRzXCI/OiBGYWNldHNDb250cm9sQ29uZmlndXJhdGlvbjtcblx0XHRcIkBjb20uc2FwLnZvY2FidWxhcmllcy5VSS52MS5IZWFkZXJGYWNldHNcIj86IEhlYWRlckZhY2V0c0NvbnRyb2xDb25maWd1cmF0aW9uO1xuXHR9O1xuXHRlbnRpdHlTZXQ6IHN0cmluZztcblx0bmF2aWdhdGlvbjoge1xuXHRcdFtuYXZpZ2F0aW9uUGF0aDogc3RyaW5nXTogTmF2aWdhdGlvblNldHRpbmdzQ29uZmlndXJhdGlvbjtcblx0fTtcblx0dmlld0xldmVsOiBudW1iZXI7XG5cdGZjbEVuYWJsZWQ6IGJvb2xlYW47XG5cdHZhcmlhbnRNYW5hZ2VtZW50PzogVmFyaWFudE1hbmFnZW1lbnRUeXBlO1xufTtcblxuZXhwb3J0IHR5cGUgTmF2aWdhdGlvblRhcmdldENvbmZpZ3VyYXRpb24gPSB7XG5cdG91dGJvdW5kPzogc3RyaW5nO1xuXHRvdXRib3VuZERldGFpbD86IHtcblx0XHRzZW1hbnRpY09iamVjdDogc3RyaW5nO1xuXHRcdGFjdGlvbjogc3RyaW5nO1xuXHRcdHBhcmFtZXRlcnM/OiBhbnk7XG5cdH07XG5cdHJvdXRlPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiBOYXZpZ2F0aW9uU2V0dGluZ3NDb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIE5hdmlnYXRpb25TZXR0aW5nc0NvbmZpZ3VyYXRpb24gPSB7XG5cdGNyZWF0ZT86IE5hdmlnYXRpb25UYXJnZXRDb25maWd1cmF0aW9uO1xuXHRkZXRhaWw/OiBOYXZpZ2F0aW9uVGFyZ2V0Q29uZmlndXJhdGlvbjtcblx0ZGlzcGxheT86IHtcblx0XHRvdXRib3VuZD86IHN0cmluZztcblx0XHR0YXJnZXQ/OiBzdHJpbmc7IC8vIGZvciBjb21wYXRpYmlsaXR5XG5cdFx0cm91dGU/OiBzdHJpbmc7XG5cdH07XG59O1xuXG50eXBlIEhlYWRlckZhY2V0c0NvbnRyb2xDb25maWd1cmF0aW9uID0ge1xuXHRmYWNldHM6IENvbmZpZ3VyYWJsZVJlY29yZDxNYW5pZmVzdEhlYWRlckZhY2V0Pjtcbn07XG5cbnR5cGUgRmFjZXRzQ29udHJvbENvbmZpZ3VyYXRpb24gPSB7XG5cdHNlY3Rpb25zOiBDb25maWd1cmFibGVSZWNvcmQ8TWFuaWZlc3RTZWN0aW9uPjtcbn07XG5cbmV4cG9ydCB0eXBlIENvbnRyb2xNYW5pZmVzdENvbmZpZ3VyYXRpb24gPVxuXHR8IFRhYmxlTWFuaWZlc3RDb25maWd1cmF0aW9uXG5cdHwgQ2hhcnRNYW5pZmVzdENvbmZpZ3VyYXRpb25cblx0fCBGYWNldHNDb250cm9sQ29uZmlndXJhdGlvblxuXHR8IEhlYWRlckZhY2V0c0NvbnRyb2xDb25maWd1cmF0aW9uO1xuXG4vKiogT2JqZWN0IFBhZ2UgKiovXG5cbmV4cG9ydCB0eXBlIE9iamVjdFBhZ2VNYW5pZmVzdFNldHRpbmdzID0gQmFzZU1hbmlmZXN0U2V0dGluZ3MgJiB7XG5cdGNvbnRlbnQ/OiB7XG5cdFx0aGVhZGVyPzoge1xuXHRcdFx0ZmFjZXRzPzogQ29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0SGVhZGVyRmFjZXQ+O1xuXHRcdH07XG5cdFx0Ym9keT86IHtcblx0XHRcdHNlY3Rpb25zPzogQ29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0U2VjdGlvbj47XG5cdFx0fTtcblx0fTtcblx0ZWRpdGFibGVIZWFkZXJDb250ZW50OiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiBNYW5pZmVzdEhlYWRlckZhY2V0XG4gKi9cbmV4cG9ydCB0eXBlIE1hbmlmZXN0SGVhZGVyRmFjZXQgPSB7XG5cdHR5cGU6IEhlYWRlckZhY2V0VHlwZTtcblx0bmFtZTogc3RyaW5nO1xuXHRwb3NpdGlvbj86IFBvc2l0aW9uO1xuXHR2aXNpYmxlPzogQmluZGluZ0V4cHJlc3Npb248Ym9vbGVhbj47XG5cdHRpdGxlPzogc3RyaW5nO1xuXHRzdWJUaXRsZT86IHN0cmluZztcblx0c3Rhc2hlZD86IGJvb2xlYW47XG5cdGZsZXhTZXR0aW5ncz86IEZsZXhTZXR0aW5ncztcblx0cmVxdWVzdEdyb3VwSWQ/OiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIE1hbmlmZXN0U2VjdGlvblxuICovXG5leHBvcnQgdHlwZSBNYW5pZmVzdFNlY3Rpb24gPSB7XG5cdHR5cGU6IFNlY3Rpb25UeXBlO1xuXHR0aXRsZTogc3RyaW5nO1xuXHRpZD86IHN0cmluZztcblx0bmFtZT86IHN0cmluZztcblx0dmlzaWJsZT86IEJpbmRpbmdFeHByZXNzaW9uPGJvb2xlYW4+O1xuXHRwb3NpdGlvbj86IFBvc2l0aW9uO1xuXHRzdWJTZWN0aW9ucz86IFJlY29yZDxzdHJpbmcsIE1hbmlmZXN0U3ViU2VjdGlvbj47XG5cdGFjdGlvbnM/OiBSZWNvcmQ8c3RyaW5nLCBNYW5pZmVzdEFjdGlvbj47XG59O1xuXG5leHBvcnQgdHlwZSBNYW5pZmVzdFN1YlNlY3Rpb24gPSB7XG5cdHR5cGU6IFNlY3Rpb25UeXBlO1xuXHRpZD86IHN0cmluZztcblx0bmFtZT86IHN0cmluZztcblx0dGl0bGU6IHN0cmluZztcblx0cG9zaXRpb24/OiBQb3NpdGlvbjtcblx0dmlzaWJsZT86IEJpbmRpbmdFeHByZXNzaW9uPGJvb2xlYW4+O1xuXHRhY3Rpb25zPzogUmVjb3JkPHN0cmluZywgTWFuaWZlc3RBY3Rpb24+O1xufTtcblxuLyoqIExpc3QgUmVwb3J0ICoqL1xuXG5leHBvcnQgdHlwZSBMaXN0UmVwb3J0TWFuaWZlc3RTZXR0aW5ncyA9IEJhc2VNYW5pZmVzdFNldHRpbmdzICYge1xuXHRpbml0aWFsTG9hZD86IGJvb2xlYW47XG5cdHZpZXdzPzogTXVsdGlwbGVWaWV3c0NvbmZpZ3VyYXRpb247XG59O1xuZXhwb3J0IHR5cGUgVmlld1BhdGhDb25maWd1cmF0aW9uID0ge1xuXHRrZWVwUHJldmlvdXNQcmVzb25hbGl6YXRpb24/OiBib29sZWFuO1xuXHRrZXk6IHN0cmluZztcblx0YW5ub3RhdGlvblBhdGg6IHN0cmluZztcbn07XG5cbi8qKlxuICogQHR5cGVkZWYgTXVsdGlwbGVWaWV3c0NvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IHR5cGUgTXVsdGlwbGVWaWV3c0NvbmZpZ3VyYXRpb24gPSB7XG5cdHBhdGhzOiBWaWV3UGF0aENvbmZpZ3VyYXRpb25bXTtcblx0c2hvd0NvdW50cz86IGJvb2xlYW47XG59O1xuXG4vKiogQ2hhcnQgQ29uZmlndXJhdGlvbiAqKi9cblxuZXhwb3J0IHR5cGUgQ2hhcnRQZXJzb25hbGl6YXRpb25NYW5pZmVzdFNldHRpbmdzID1cblx0fCBib29sZWFuXG5cdHwge1xuXHRcdFx0c29ydDogYm9vbGVhbjtcblx0XHRcdHR5cGU6IGJvb2xlYW47XG5cdFx0XHRpdGVtOiBib29sZWFuO1xuXHQgIH07XG5cbmV4cG9ydCB0eXBlIENoYXJ0TWFuaWZlc3RDb25maWd1cmF0aW9uID0ge1xuXHRjaGFydFNldHRpbmdzOiB7XG5cdFx0cGVyc29uYWxpemF0aW9uOiBDaGFydFBlcnNvbmFsaXphdGlvbk1hbmlmZXN0U2V0dGluZ3M7XG5cdH07XG59O1xuXG5leHBvcnQgdHlwZSBBY3Rpb25BZnRlckV4ZWN1dGlvbkNvbmZpZ3VyYXRpb24gPSB7XG5cdG5hdmlnYXRlVG9JbnN0YW5jZTogYm9vbGVhbjtcbn07XG5cbi8qKiBUYWJsZSBDb25maWd1cmF0aW9uICoqL1xuXG4vKipcbiAqIEB0eXBlZGVmIE1hbmlmZXN0QWN0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIE1hbmlmZXN0QWN0aW9uID0ge1xuXHR2aXNpYmxlPzogc3RyaW5nO1xuXHRlbmFibGVkPzogc3RyaW5nO1xuXHRwb3NpdGlvbj86IFBvc2l0aW9uO1xuXHRwcmVzczogc3RyaW5nO1xuXHR0ZXh0OiBzdHJpbmc7XG5cdGVuYWJsZU9uU2VsZWN0OiBzdHJpbmc7XG5cdGFmdGVyRXhlY3V0aW9uPzogQWN0aW9uQWZ0ZXJFeGVjdXRpb25Db25maWd1cmF0aW9uO1xufTtcblxuZXhwb3J0IHR5cGUgTWFuaWZlc3RUYWJsZUNvbHVtbiA9IFBvc2l0aW9uYWJsZSAmIHtcblx0aGVhZGVyOiBzdHJpbmc7XG5cdHdpZHRoPzogc3RyaW5nO1xuXHR0ZW1wbGF0ZTogc3RyaW5nO1xuXHRhZnRlckV4ZWN1dGlvbj86IEFjdGlvbkFmdGVyRXhlY3V0aW9uQ29uZmlndXJhdGlvbjtcbn07XG5cbmV4cG9ydCB0eXBlIFRhYmxlTWFuaWZlc3RDb25maWd1cmF0aW9uID0ge1xuXHR0YWJsZVNldHRpbmdzOiBUYWJsZU1hbmlmZXN0U2V0dGluZ3NDb25maWd1cmF0aW9uO1xuXHRhY3Rpb25zPzogUmVjb3JkPHN0cmluZywgTWFuaWZlc3RBY3Rpb24+O1xuXHRjb2x1bW5zPzogUmVjb3JkPHN0cmluZywgTWFuaWZlc3RUYWJsZUNvbHVtbj47XG59O1xuXG5leHBvcnQgZW51bSBTZWxlY3Rpb25Nb2RlIHtcblx0QXV0byA9IFwiQXV0b1wiLFxuXHROb25lID0gXCJOb25lXCIsXG5cdE11bHRpID0gXCJNdWx0aVwiLFxuXHRTaW5nbGUgPSBcIlNpbmdsZVwiXG59XG5cbmV4cG9ydCB0eXBlIFRhYmxlUGVyc29uYWxpemF0aW9uQ29uZmlndXJhdGlvbiA9XG5cdHwgYm9vbGVhblxuXHR8IHtcblx0XHRcdHNvcnQ6IGJvb2xlYW47XG5cdFx0XHRjb2x1bW46IGJvb2xlYW47XG5cdFx0XHRmaWx0ZXI6IGJvb2xlYW47XG5cdCAgfTtcblxuZXhwb3J0IHR5cGUgVGFibGVNYW5pZmVzdFNldHRpbmdzQ29uZmlndXJhdGlvbiA9IHtcblx0ZW5hYmxlQXV0b1Njcm9sbDogYm9vbGVhbjtcblx0Y3JlYXRpb25Nb2RlPzoge1xuXHRcdGRpc2FibGVBZGRSb3dCdXR0b25Gb3JFbXB0eURhdGE/OiBib29sZWFuO1xuXHRcdGNyZWF0ZUF0RW5kPzogYm9vbGVhbjtcblx0XHRuYW1lPzogQ3JlYXRpb25Nb2RlO1xuXHR9O1xuXHRlbmFibGVFeHBvcnQ/OiBib29sZWFuO1xuXHRxdWlja1ZhcmlhbnRTZWxlY3Rpb246IHtcblx0XHRwYXRoczogW1xuXHRcdFx0e1xuXHRcdFx0XHRhbm5vdGF0aW9uUGF0aDogc3RyaW5nO1xuXHRcdFx0fVxuXHRcdF07XG5cdFx0aGlkZVRhYmxlVGl0bGU/OiBib29sZWFuO1xuXHRcdHNob3dDb3VudHM/OiBib29sZWFuO1xuXHR9O1xuXHRwZXJzb25hbGl6YXRpb246IFRhYmxlUGVyc29uYWxpemF0aW9uQ29uZmlndXJhdGlvbjtcblx0LyoqXG5cdCAqIERlZmluZXMgaG93IG1hbnkgaXRlbXMgaW4gYSB0YWJsZSBjYW4gYmUgc2VsZWN0YWJsZS4gXCJBdXRvXCIgZGVmaW5lcyB0aGUgc2VsZWN0aW9uIGFzIFwiTXVsdGlcIiBpZiB0aGVyZSBpcyBhbiBhY3Rpb24gb3IgaWYgaXQncyBkZWxldGFibGUuIElmIHRoZXJlIGFyZSBubyBpbnRlcmFjdGlvbnMgaXRzIHNldCB0byBcIk5vbmVcIiBvbiBcIkF1dG9cIi4gXCJNdWx0aVwiIGxldCdzIHlvdSBzZWxlY3Qgc2V2ZXJhbCBpdGVtcywgXCJTaW5nbGVcIiBsZXQncyB5b3Ugc2VsZWN0IG9uZSBpdGVtLCBOb25lIHR1cm5zIG9mIHNlbGVjdGlvbi5cblx0ICovXG5cdHNlbGVjdGlvbk1vZGU6IFNlbGVjdGlvbk1vZGU7XG5cdHR5cGU6IHN0cmluZztcbn07XG5cbi8qKlxuICogQHR5cGVkZWYgTWFuaWZlc3RXcmFwcGVyXG4gKi9cbmV4cG9ydCB0eXBlIE1hbmlmZXN0V3JhcHBlciA9IHtcblx0LyoqXG5cdCAqIFJldHJpZXZlIHRoZSBoZWFkZXIgYWN0aW9ucyBkZWZpbmVkIGluIHRoZSBtYW5pZmVzdFxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Q29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0SGVhZGVyRmFjZXQ+fSBhIHNldCBvZiBtYW5pZmVzdCBoZWFkZXIgZmFjZXRzIGluZGV4ZWQgYnkgYW4gaXRlcmFibGUga2V5XG5cdCAqL1xuXHRnZXRIZWFkZXJGYWNldHMoKTogQ29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0SGVhZGVyRmFjZXQ+O1xuXHQvKipcblx0ICogUmV0cmlldmUgdGhlIGhlYWRlciBhY3Rpb25zIGRlZmluZWQgaW4gdGhlIG1hbmlmZXN0XG5cdCAqXG5cdCAqIEByZXR1cm5zIHtDb25maWd1cmFibGVSZWNvcmQ8TWFuaWZlc3RBY3Rpb24+fSBhIHNldCBvZiBtYW5pZmVzdCBhY3Rpb24gaW5kZXhlZCBieSBhbiBpdGVyYWJsZSBrZXlcblx0ICovXG5cdGdldEhlYWRlckFjdGlvbnMoKTogQ29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0QWN0aW9uPjtcblxuXHQvKipcblx0ICogUmV0cmlldmUgdGhlIGZvb3RlciBhY3Rpb25zIGRlZmluZWQgaW4gdGhlIG1hbmlmZXN0XG5cdCAqXG5cdCAqIEByZXR1cm5zIHtDb25maWd1cmFibGVSZWNvcmQ8TWFuaWZlc3RBY3Rpb24+fSBhIHNldCBvZiBtYW5pZmVzdCBhY3Rpb24gaW5kZXhlZCBieSBhbiBpdGVyYWJsZSBrZXlcblx0ICovXG5cdGdldEZvb3RlckFjdGlvbnMoKTogQ29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0QWN0aW9uPjtcblxuXHQvKipcblx0ICogUmV0cmlldmUgdGhlIHZhcmlhbnQgbWFuYWdlbWVudCBhcyBkZWZpbmVkIGluIHRoZSBtYW5pZmVzdFxuXHQgKlxuXHQgKiBAcmV0dXJucyB7VmFyaWFudE1hbmFnZW1lbnRUeXBlfSBhIHR5cGUgb2YgdmFyaWFudCBtYW5hZ2VtZW50XG5cdCAqL1xuXHRnZXRWYXJpYW50TWFuYWdlbWVudCgpOiBWYXJpYW50TWFuYWdlbWVudFR5cGU7XG5cblx0LyoqXG5cdCAqIFJldHJpZXZlIHRoZSB2aWV3IGxldmVsXG5cdCAqL1xuXHRnZXRWaWV3TGV2ZWwoKTogbnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBDaGVjayB3aGV0aGVyIHdlIGFyZSBpbiBGQ0wgbW9kZSBvciBub3Rcblx0ICovXG5cdGlzRmNsRW5hYmxlZCgpOiBib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBSZXRyaWV2ZSB0aGUgY29udHJvbCBjb25maWd1cmF0aW9uIGFzIGRlZmluZWQgaW4gdGhlIG1hbmlmZXN0IGZvciBhIHNwZWNpZmljIGFubm90YXRpb24gcGF0aFxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc0Fubm90YXRpb25QYXRoIHRoZSByZWxhdGl2ZSBhbm5vdGF0aW9uIHBhdGhcblx0ICogQHByaXZhdGVcblx0ICogQHJldHVybnMge29iamVjdH0gdGhlIGNvbnRyb2wgY29uZmlndXJhdGlvblxuXHQgKi9cblx0Z2V0Q29udHJvbENvbmZpZ3VyYXRpb24oc0Fubm90YXRpb25QYXRoOiBzdHJpbmcpOiBhbnk7XG5cblx0LyoqXG5cdCAqIFJldHJpZXZlIHRoZSBjb25maWd1cmVkIHNldHRpbmdzIGZvciBhIGdpdmVuIG5hdmlnYXRpb24gdGFyZ2V0XG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYXZpZ2F0aW9uT3JDb2xsZWN0aW9uTmFtZVxuXHQgKiBAcmV0dXJucyB7TmF2aWdhdGlvblNldHRpbmdzQ29uZmlndXJhdGlvbn0gdGhlIG5hdmlnYXRpb24gc2V0dGluZ3MgY29uZmlndXJhdGlvblxuXHQgKi9cblx0Z2V0TmF2aWdhdGlvbkNvbmZpZ3VyYXRpb24obmF2aWdhdGlvbk9yQ29sbGVjdGlvbk5hbWU6IHN0cmluZyk6IE5hdmlnYXRpb25TZXR0aW5nc0NvbmZpZ3VyYXRpb247XG5cblx0Ly8gT1AgU3BlY2lmaWNcblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBvZiB0aGUgaGVhZGVyIG9mIHRoZSBhcHBsaWNhdGlvbiBpcyBlZGl0YWJsZSBhbmQgc2hvdWxkIGFwcGVhciBpbiB0aGVcblx0ICpcblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqL1xuXHRpc0hlYWRlckVkaXRhYmxlKCk6IGJvb2xlYW47XG5cblx0LyoqXG5cdCAqIFJldHJpZXZlIHRoZSBzZWN0aW9ucyBkZWZpbmVkIGluIHRoZSBtYW5pZmVzdFxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Q29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0U2VjdGlvbj59IGEgc2V0IG9mIG1hbmlmZXN0IHNlY3Rpb25zIGluZGV4ZWQgYnkgYW4gaXRlcmFibGUga2V5XG5cdCAqL1xuXHRnZXRTZWN0aW9ucygpOiBDb25maWd1cmFibGVSZWNvcmQ8TWFuaWZlc3RTZWN0aW9uPjtcblxuXHQvLyBMUiBTcGVjaWZpY1xuXHQvKipcblx0ICogUmV0cmlldmUgdGhlIG11bHRpcGxlIHZpZXcgY29uZmlndXJhdGlvbiBmcm9tIHRoZSBtYW5pZmVzdFxuXHQgKlxuXHQgKiBAcmV0dXJucyB7TXVsdGlwbGVWaWV3c0NvbmZpZ3VyYXRpb259IHRoZSB2aWV3cyB0aGF0IHJlcHJlc2VudCB0aGUgbWFuaWZlc3Qgb2JqZWN0XG5cdCAqL1xuXHRnZXRWaWV3Q29uZmlndXJhdGlvbigpOiBNdWx0aXBsZVZpZXdzQ29uZmlndXJhdGlvbiB8IHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlciBvYmplY3QgdGhhdCBlbnN1cmUgY29uc2lzdGVudCByZXR1cm4gZGF0YSBmcm9tIHRoZSBtYW5pZmVzdCBhbmQgdGhhdCB3aWxsIHRha2UgY2FyZSBvZiBtZXJnaW5nIHRoZSBkaWZmZXJlbnQgbWFuaWZlc3QgXCJzYXVjZVwiLlxuICpcbiAqIEBwYXJhbSB7QmFzZU1hbmlmZXN0U2V0dGluZ3N9IG9NYW5pZmVzdFNldHRpbmdzIHRoZSBtYW5pZmVzdCBzZXR0aW5ncyBmb3IgdGhlIGN1cnJlbnQgcGFnZVxuICogQHJldHVybnMge01hbmlmZXN0V3JhcHBlcn0gdGhlIG1hbmlmZXN0IHdyYXBwZXIgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNYW5pZmVzdFdyYXBwZXIob01hbmlmZXN0U2V0dGluZ3M6IEJhc2VNYW5pZmVzdFNldHRpbmdzKTogTWFuaWZlc3RXcmFwcGVyIHtcblx0cmV0dXJuIHtcblx0XHRnZXRIZWFkZXJGYWNldHMoKTogQ29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0SGVhZGVyRmFjZXQ+IHtcblx0XHRcdHJldHVybiBtZXJnZShcblx0XHRcdFx0e30sXG5cdFx0XHRcdG9NYW5pZmVzdFNldHRpbmdzLmNvbnRyb2xDb25maWd1cmF0aW9uPy5bXCJAY29tLnNhcC52b2NhYnVsYXJpZXMuVUkudjEuSGVhZGVyRmFjZXRzXCJdPy5mYWNldHMsXG5cdFx0XHRcdChvTWFuaWZlc3RTZXR0aW5ncyBhcyBPYmplY3RQYWdlTWFuaWZlc3RTZXR0aW5ncykuY29udGVudD8uaGVhZGVyPy5mYWNldHNcblx0XHRcdCk7XG5cdFx0fSxcblx0XHRnZXRIZWFkZXJBY3Rpb25zKCk6IENvbmZpZ3VyYWJsZVJlY29yZDxNYW5pZmVzdEFjdGlvbj4ge1xuXHRcdFx0cmV0dXJuIG9NYW5pZmVzdFNldHRpbmdzLmNvbnRlbnQ/LmhlYWRlcj8uYWN0aW9ucyB8fCB7fTtcblx0XHR9LFxuXHRcdGdldEZvb3RlckFjdGlvbnMoKTogQ29uZmlndXJhYmxlUmVjb3JkPE1hbmlmZXN0QWN0aW9uPiB7XG5cdFx0XHRyZXR1cm4gb01hbmlmZXN0U2V0dGluZ3MuY29udGVudD8uZm9vdGVyPy5hY3Rpb25zIHx8IHt9O1xuXHRcdH0sXG5cblx0XHRnZXRWYXJpYW50TWFuYWdlbWVudCgpOiBWYXJpYW50TWFuYWdlbWVudFR5cGUge1xuXHRcdFx0cmV0dXJuIG9NYW5pZmVzdFNldHRpbmdzLnZhcmlhbnRNYW5hZ2VtZW50IHx8IFZhcmlhbnRNYW5hZ2VtZW50VHlwZS5Ob25lO1xuXHRcdH0sXG5cdFx0Z2V0Q29udHJvbENvbmZpZ3VyYXRpb24oc0Fubm90YXRpb25QYXRoOiBzdHJpbmcpOiBhbnkge1xuXHRcdFx0cmV0dXJuIG9NYW5pZmVzdFNldHRpbmdzPy5jb250cm9sQ29uZmlndXJhdGlvbj8uW3NBbm5vdGF0aW9uUGF0aF0gfHwge307XG5cdFx0fSxcblx0XHRnZXROYXZpZ2F0aW9uQ29uZmlndXJhdGlvbihuYXZpZ2F0aW9uT3JDb2xsZWN0aW9uTmFtZTogc3RyaW5nKTogTmF2aWdhdGlvblNldHRpbmdzQ29uZmlndXJhdGlvbiB7XG5cdFx0XHRyZXR1cm4gb01hbmlmZXN0U2V0dGluZ3M/Lm5hdmlnYXRpb24/LltuYXZpZ2F0aW9uT3JDb2xsZWN0aW9uTmFtZV0gfHwge307XG5cdFx0fSxcblxuXHRcdGdldFNlY3Rpb25zKCk6IENvbmZpZ3VyYWJsZVJlY29yZDxNYW5pZmVzdFNlY3Rpb24+IHtcblx0XHRcdHJldHVybiBtZXJnZShcblx0XHRcdFx0e30sXG5cdFx0XHRcdG9NYW5pZmVzdFNldHRpbmdzLmNvbnRyb2xDb25maWd1cmF0aW9uPy5bXCJAY29tLnNhcC52b2NhYnVsYXJpZXMuVUkudjEuRmFjZXRzXCJdPy5zZWN0aW9ucyxcblx0XHRcdFx0KG9NYW5pZmVzdFNldHRpbmdzIGFzIE9iamVjdFBhZ2VNYW5pZmVzdFNldHRpbmdzKS5jb250ZW50Py5ib2R5Py5zZWN0aW9uc1xuXHRcdFx0KTtcblx0XHR9LFxuXHRcdGlzSGVhZGVyRWRpdGFibGUoKTogYm9vbGVhbiB7XG5cdFx0XHRyZXR1cm4gKG9NYW5pZmVzdFNldHRpbmdzIGFzIE9iamVjdFBhZ2VNYW5pZmVzdFNldHRpbmdzKS5lZGl0YWJsZUhlYWRlckNvbnRlbnQ7XG5cdFx0fSxcblxuXHRcdGdldFZpZXdDb25maWd1cmF0aW9uKCk6IE11bHRpcGxlVmlld3NDb25maWd1cmF0aW9uIHwgdW5kZWZpbmVkIHtcblx0XHRcdHJldHVybiAob01hbmlmZXN0U2V0dGluZ3MgYXMgTGlzdFJlcG9ydE1hbmlmZXN0U2V0dGluZ3MpLnZpZXdzO1xuXHRcdH0sXG5cblx0XHRnZXRWaWV3TGV2ZWwoKTogbnVtYmVyIHtcblx0XHRcdHJldHVybiBvTWFuaWZlc3RTZXR0aW5ncz8udmlld0xldmVsIHx8IC0xO1xuXHRcdH0sXG5cblx0XHRpc0ZjbEVuYWJsZWQoKTogYm9vbGVhbiB7XG5cdFx0XHRyZXR1cm4gISFvTWFuaWZlc3RTZXR0aW5ncz8uZmNsRW5hYmxlZDtcblx0XHR9XG5cdH07XG59XG4iXX0=