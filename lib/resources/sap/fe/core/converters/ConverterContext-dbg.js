sap.ui.define(["sap/fe/core/converters/ManifestSettings", "sap/ui/model/odata/v4/AnnotationHelper", "sap/fe/core/converters/MetaModelConverter"], function (ManifestSettings, AnnotationHelper, MetaModelConverter) {
  "use strict";

  var _exports = {};
  var convertTypes = MetaModelConverter.convertTypes;
  var createManifestWrapper = ManifestSettings.createManifestWrapper;

  /**
   * Check whether an expression is a PathExpression.
   *
   * @param expression
   * @returns {boolean}
   */
  var isPathExpression = function (expression) {
    return expression.type !== undefined && expression.type === "Path";
  };
  /**
   * Checks whether an object is an annotation term.
   *
   * @param {string|AnnotationTerm<object>} vAnnotationPath
   * @returns {boolean}
   */


  var isAnnotationTerm = function (vAnnotationPath) {
    return typeof vAnnotationPath === "object";
  };
  /**
   * Create a ConverterContext object that will be used within the converters.
   *
   * @param {ConverterOutput} oConvertedTypes the converted annotation and service types
   * @param {Context} oBaseContext the base ODataMetaModel context for this object
   * @param {BaseManifestSettings} oManifestSettings the manifestSettings that applies to this page
   * @param {EntitySet} currentEntitySet the entitySet to template against
   * @param {TemplateConverterType} templateType the type of template we're looking at right now
   *
   * @returns {ConverterContext} a converter context for the converters
   */


  function createConverterContext(oConvertedTypes, oBaseContext, oManifestSettings, currentEntitySet, templateType) {
    var oManifestWrapper = createManifestWrapper(oManifestSettings);

    var getBindingExpression = function (annotationValue, defaultValue) {
      if (!annotationValue) {
        return defaultValue;
      } else if (isPathExpression(annotationValue)) {
        return AnnotationHelper.format({
          $Path: annotationValue.path
        }, {
          context: oBaseContext
        });
      } else {
        return AnnotationHelper.format(annotationValue, {
          context: oBaseContext
        });
      }
    };

    var getInverseBindingExpression = function (annotationValue, defaultValue) {
      if (!annotationValue) {
        return defaultValue;
      } else if (typeof annotationValue === "boolean") {
        return !annotationValue;
      }

      var bindingExpression = getBindingExpression(annotationValue); // for path based values

      return "{= !$".concat(bindingExpression, " }");
    };

    var getEntityTypeFromFullyQualifiedName = function (fullyQualifiedName) {
      var targetEntityType = oConvertedTypes.entityTypes.find(function (entityType) {
        if (fullyQualifiedName.startsWith(entityType.fullyQualifiedName)) {
          var replaceAnnotation = fullyQualifiedName.replace(entityType.fullyQualifiedName, "");
          return replaceAnnotation.startsWith("/") || replaceAnnotation.startsWith("@");
        }

        return false;
      });
      return targetEntityType;
    };

    var getAnnotationEntityType = function (annotation) {
      var annotationPath = annotation.fullyQualifiedName;
      var targetEntityType = getEntityTypeFromFullyQualifiedName(annotationPath);

      if (!targetEntityType) {
        throw new Error("Cannot find Entity Type for " + annotation.fullyQualifiedName);
      }

      return targetEntityType;
    };

    var getManifestControlConfiguration = function (vAnnotationPath) {
      if (isAnnotationTerm(vAnnotationPath)) {
        return oManifestWrapper.getControlConfiguration(getRelativeAnnotationPath(vAnnotationPath.fullyQualifiedName, currentEntitySet.entityType));
      }

      return oManifestWrapper.getControlConfiguration(vAnnotationPath);
    }; //
    // const getPageManifestSettings = function(): BaseManifestSettings {
    // 	return oManifestSettings;
    // };


    var getAbsoluteAnnotationPath = function (sAnnotationPath) {
      if (sAnnotationPath[0] === "/") {
        return sAnnotationPath;
      }

      return oBaseContext.getPath(sAnnotationPath);
    };

    var getEntitySet = function () {
      return currentEntitySet;
    };

    var getEntitySetForEntityType = function (entityType) {
      return oConvertedTypes.entitySets.find(function (entitySet) {
        return entitySet.entityType === entityType;
      });
    };

    var getEntityTypeAnnotation = function (annotationPath) {
      if (annotationPath.indexOf("@") === -1) {
        annotationPath = "@" + annotationPath;
      }

      return currentEntitySet.entityType.resolvePath(annotationPath);
    };

    var getAnnotationPathFromFullyQualifiedName = function (fullyQualifiedName) {
      var targetEntityType = getEntityTypeFromFullyQualifiedName(fullyQualifiedName);

      if (!targetEntityType) {
        return fullyQualifiedName;
      } else {
        var targetEntitySet = getEntitySetForEntityType(targetEntityType);

        if (!targetEntitySet) {
          return fullyQualifiedName;
        }

        return fullyQualifiedName.replace(targetEntityType.fullyQualifiedName, "/" + targetEntitySet.name + "/");
      }
    };

    var getTemplateConverterType = function () {
      return templateType;
    };

    var getRelativeAnnotationPath = function (annotationPath, entityType) {
      return annotationPath.replace(entityType.fullyQualifiedName, "");
    };

    var getEntitySetBasedAnnotationPath = function (annotationPath) {
      var entityTypeFQN = currentEntitySet.entityType.fullyQualifiedName;
      return "/" + annotationPath.replace(entityTypeFQN, currentEntitySet.name + "/");
    };

    var getManifestWrapper = function () {
      return oManifestWrapper;
    };

    return {
      getBindingExpression: getBindingExpression,
      getInverseBindingExpression: getInverseBindingExpression,
      getAnnotationEntityType: getAnnotationEntityType,
      getManifestControlConfiguration: getManifestControlConfiguration,
      getAbsoluteAnnotationPath: getAbsoluteAnnotationPath,
      getAnnotationPathFromFullyQualifiedName: getAnnotationPathFromFullyQualifiedName,
      getEntitySet: getEntitySet,
      getEntitySetForEntityType: getEntitySetForEntityType,
      getEntityTypeAnnotation: getEntityTypeAnnotation,
      getTemplateConverterType: getTemplateConverterType,
      getRelativeAnnotationPath: getRelativeAnnotationPath,
      getEntitySetBasedAnnotationPath: getEntitySetBasedAnnotationPath,
      getManifestWrapper: getManifestWrapper
    };
  }
  /**
   * Create the converter context necessary for a macro based on a metamodel context.
   *
   * @param sEntitySetName
   * @param oMetaModelContext
   * @param sTemplateType
   * @returns {ConverterContext} the current converter context
   */


  _exports.createConverterContext = createConverterContext;

  function createConverterContextForMacro(sEntitySetName, oMetaModelContext, sTemplateType) {
    var oConverterOutput = convertTypes(oMetaModelContext.getModel());
    var targetEntitySet = oConverterOutput.entitySets.find(function (entitySet) {
      return entitySet.name === sEntitySetName;
    });
    return createConverterContext(oConverterOutput, oMetaModelContext, {}, targetEntitySet, sTemplateType);
  }

  _exports.createConverterContextForMacro = createConverterContextForMacro;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,