sap.ui.define(["sap/fe/core/converters/ManifestSettings", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/converters/helpers/ID"], function (ManifestSettings, ConfigurableObject, ID) {
  "use strict";

  var _exports = {};
  var CustomActionID = ID.CustomActionID;
  var Placement = ConfigurableObject.Placement;
  var ActionType = ManifestSettings.ActionType;

  /**
   * Create the action configuration based on the manifest settings.
   * @param {Record<string, ManifestAction> | undefined} manifestActions the manifest definition
   * @param {NavigationSettingsConfiguration} navigationSettings
   * @param {boolean} considerNavigationSettings
   * @returns {Record<string, CustomAction>} the actions from the manifest
   */
  function getActionsFromManifest(manifestActions, navigationSettings, considerNavigationSettings) {
    var actions = {};

    for (var actionKey in manifestActions) {
      var _manifestAction$press, _manifestAction$posit;

      var manifestAction = manifestActions[actionKey];
      var lastDotIndex = (_manifestAction$press = manifestAction.press) === null || _manifestAction$press === void 0 ? void 0 : _manifestAction$press.lastIndexOf(".");
      actions[actionKey] = {
        id: CustomActionID(actionKey),
        visible: manifestAction.visible === undefined ? "true" : manifestAction.visible,
        enabled: manifestAction.enabled === undefined ? "true" : manifestAction.enabled,
        handlerModule: manifestAction.press && manifestAction.press.substring(0, lastDotIndex).replace(/\./gi, "/"),
        handlerMethod: manifestAction.press && manifestAction.press.substring(lastDotIndex + 1),
        press: manifestAction.press,
        type: ActionType.Default,
        text: manifestAction.text,
        key: actionKey,
        enableOnSelect: manifestAction.enableOnSelect,
        position: {
          anchor: (_manifestAction$posit = manifestAction.position) === null || _manifestAction$posit === void 0 ? void 0 : _manifestAction$posit.anchor,
          placement: manifestAction.position === undefined ? Placement.After : manifestAction.position.placement
        },
        isNavigable: isActionNavigable(manifestAction, navigationSettings, considerNavigationSettings)
      };
    }

    return actions;
  }

  _exports.getActionsFromManifest = getActionsFromManifest;

  function getEnabledBinding(actionDefinition, converterContext) {
    var _actionDefinition$ann, _actionDefinition$ann2;

    if (!actionDefinition) {
      return "true";
    }

    if (!actionDefinition.isBound) {
      return "true";
    }

    var operationAvailable = (_actionDefinition$ann = actionDefinition.annotations) === null || _actionDefinition$ann === void 0 ? void 0 : (_actionDefinition$ann2 = _actionDefinition$ann.Core) === null || _actionDefinition$ann2 === void 0 ? void 0 : _actionDefinition$ann2.OperationAvailable;

    if (operationAvailable) {
      var bindingExpression = converterContext.getBindingExpression(operationAvailable);

      if (bindingExpression) {
        var _actionDefinition$par, _actionDefinition$par2;

        /**
         * Action Parameter is ignored by the formatter when trigger by templating
         * here it's done manually
         **/
        var paramSuffix = (_actionDefinition$par = actionDefinition.parameters) === null || _actionDefinition$par === void 0 ? void 0 : (_actionDefinition$par2 = _actionDefinition$par[0]) === null || _actionDefinition$par2 === void 0 ? void 0 : _actionDefinition$par2.fullyQualifiedName;

        if (paramSuffix) {
          paramSuffix = paramSuffix.replace(actionDefinition.fullyQualifiedName + "/", "");
          bindingExpression = bindingExpression.replace(paramSuffix + "/", "");
        }

        return bindingExpression;
      }

      return "true";
    }

    return "true";
    /*
       FIXME Disable failing music tests
    	Due to limitation on CAP the following binding (which is the good one) generates error:
    			   return "{= !${#" + field.Action + "} ? false : true }";
    	CAP tries to read the action as property and doesn't find it
    */
  }

  _exports.getEnabledBinding = getEnabledBinding;

  function isActionNavigable(action, navigationSettings, considerNavigationSettings) {
    var _action$afterExecutio;

    var bIsNavigationConfigured = true;

    if (considerNavigationSettings) {
      var detailOrDisplay = navigationSettings && (navigationSettings.detail || navigationSettings.display);
      bIsNavigationConfigured = (detailOrDisplay === null || detailOrDisplay === void 0 ? void 0 : detailOrDisplay.route) ? true : false;
    }

    if (action && action.afterExecution && ((_action$afterExecutio = action.afterExecution) === null || _action$afterExecutio === void 0 ? void 0 : _action$afterExecutio.navigateToInstance) === false || !bIsNavigationConfigured) {
      return false;
    }

    return true;
  }

  _exports.isActionNavigable = isActionNavigable;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,