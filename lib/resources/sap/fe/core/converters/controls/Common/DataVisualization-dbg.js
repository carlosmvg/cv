sap.ui.define(["./Table", "./Chart"], function (Table, Chart) {
  "use strict";

  var _exports = {};
  var createChartVisualization = Chart.createChartVisualization;
  var createTableVisualization = Table.createTableVisualization;
  var createDefaultTableVisualization = Table.createDefaultTableVisualization;

  var getVisualizationsFromPresentationVariant = function (presentationVariantAnnotation, visualizationPath, converterContext) {
    var visualizationAnnotations = [];
    var visualizations = presentationVariantAnnotation.Visualizations || [];
    var baseVisualizationPath = visualizationPath.split("@")[0];

    if (visualizations) {
      // Only allow one line item / chart
      var hasLineItem = false;
      var hasChart = false;
      var hasVisualization = false; // used to allow only first visualization in OP

      visualizations.forEach(function (visualization) {
        switch (visualization.$target.term) {
          case "com.sap.vocabularies.UI.v1.LineItem":
            if (!hasLineItem) {
              if (!(converterContext.getTemplateConverterType() === "ObjectPage" && hasVisualization)) {
                visualizationAnnotations.push({
                  visualization: visualization.$target,
                  annotationPath: "".concat(baseVisualizationPath).concat(visualization.value)
                });
                hasLineItem = true;
                hasVisualization = true;
              }
            }

            break;

          case "com.sap.vocabularies.UI.v1.Chart":
            if (!hasChart && sap.ui.Device && sap.ui.Device.system.desktop && (converterContext.getTemplateConverterType() === "AnalyticalListPage" && !converterContext.getManifestWrapper().getViewConfiguration() || converterContext.getTemplateConverterType() === "ObjectPage" && !hasVisualization)) {
              visualizationAnnotations.push({
                visualization: visualization.$target,
                annotationPath: "".concat(baseVisualizationPath).concat(visualization.value)
              });
              hasChart = true;
              hasVisualization = true;
            }

            break;
        }
      });
    }

    return visualizationAnnotations;
  };

  function isPresentationCompliant(presentationVariant) {
    return presentationVariant && presentationVariant.Visualizations && !!presentationVariant.Visualizations.find(function (visualization) {
      return visualization.$target.term === "com.sap.vocabularies.UI.v1.LineItem";
    });
  }

  _exports.isPresentationCompliant = isPresentationCompliant;

  function isPresentationALPCompliant(presentationVariant) {
    var bHasTable = false,
        bHasChart = false;

    if (presentationVariant && presentationVariant.Visualizations) {
      var aVisualizations = presentationVariant.Visualizations;
      aVisualizations.map(function (oVisualization) {
        if (oVisualization.$target.term === "com.sap.vocabularies.UI.v1.LineItem") {
          bHasTable = true;
        }

        if (oVisualization.$target.term === "com.sap.vocabularies.UI.v1.Chart") {
          bHasChart = true;
        }
      });
    }

    return bHasChart && bHasTable;
  }

  _exports.isPresentationALPCompliant = isPresentationALPCompliant;

  function getDefaultLineItem(entityType) {
    var _entityType$annotatio;

    return (_entityType$annotatio = entityType.annotations.UI) === null || _entityType$annotatio === void 0 ? void 0 : _entityType$annotatio.LineItem;
  }

  _exports.getDefaultLineItem = getDefaultLineItem;

  function getDefaultChart(entityType) {
    var _entityType$annotatio2;

    return (_entityType$annotatio2 = entityType.annotations.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : _entityType$annotatio2.Chart;
  }

  _exports.getDefaultChart = getDefaultChart;

  function getDefaultPresentationVariant(entityType) {
    var _entityType$annotatio3, _entityType$annotatio4;

    return (_entityType$annotatio3 = entityType.annotations) === null || _entityType$annotatio3 === void 0 ? void 0 : (_entityType$annotatio4 = _entityType$annotatio3.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : _entityType$annotatio4.PresentationVariant;
  }

  _exports.getDefaultPresentationVariant = getDefaultPresentationVariant;

  function getDataVisualizationConfiguration(visualization, converterContext) {
    var visualizationAnnotations = [];
    var presentationVariantAnnotation;
    var presentationPath = "";
    var chartVisualization, tableVisualization;
    var sTerm = visualization && visualization.annotation && visualization.annotation.term;

    if (sTerm) {
      switch (sTerm) {
        case "com.sap.vocabularies.UI.v1.LineItem":
        case "com.sap.vocabularies.UI.v1.Chart":
          visualizationAnnotations.push({
            visualization: visualization.annotation,
            annotationPath: visualization.path
          });
          break;

        case "com.sap.vocabularies.UI.v1.PresentationVariant":
          presentationVariantAnnotation = visualization.annotation;
          visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(visualization.annotation, visualization.path, converterContext));
          break;

        case "com.sap.vocabularies.UI.v1.SelectionPresentationVariant":
          presentationVariantAnnotation = visualization.annotation.PresentationVariant; // Presentation can be inline or outside the SelectionPresentationVariant

          presentationPath = converterContext.getRelativeAnnotationPath(presentationVariantAnnotation.fullyQualifiedName, converterContext.getAnnotationEntityType(visualization.annotation));

          if (!isPresentationCompliant(presentationVariantAnnotation)) {
            var entityType = converterContext.getEntitySet().entityType;
            var defaultLineItemAnnotation = getDefaultLineItem(entityType);

            if (defaultLineItemAnnotation) {
              visualizationAnnotations.push({
                visualization: defaultLineItemAnnotation,
                annotationPath: converterContext.getRelativeAnnotationPath(defaultLineItemAnnotation.fullyQualifiedName, entityType)
              });
            }
          } else {
            visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(presentationVariantAnnotation, visualization.path, converterContext));
          }

          break;
      }

      visualizationAnnotations.map(function (visualizationAnnotation) {
        var visualization = visualizationAnnotation.visualization,
            annotationPath = visualizationAnnotation.annotationPath;

        switch (visualization.term) {
          case "com.sap.vocabularies.UI.v1.Chart":
            chartVisualization = createChartVisualization(visualization, annotationPath, converterContext);
            break;

          case "com.sap.vocabularies.UI.v1.LineItem":
          default:
            tableVisualization = createTableVisualization(visualization, annotationPath, converterContext, presentationVariantAnnotation);
            break;
        }
      });
    } else {
      tableVisualization = [createDefaultTableVisualization(converterContext)];
    }

    var aVisualizations = [];
    var sPath = sTerm === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant" ? presentationPath : visualization.path;

    if (chartVisualization) {
      aVisualizations.push(chartVisualization);
    }

    if (tableVisualization) {
      aVisualizations.push(tableVisualization);
    }

    return {
      visualizations: aVisualizations,
      annotationPath: converterContext.getAbsoluteAnnotationPath(sPath)
    };
  }

  _exports.getDataVisualizationConfiguration = getDataVisualizationConfiguration;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,