sap.ui.define(["../ManifestSettings", "../controls/ObjectPage/SubSection", "../controls/ObjectPage/HeaderFacet", "../helpers/ID", "../helpers/ConfigurableObject", "sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/objectPage/HeaderAndFooterAction"], function (ManifestSettings, SubSection, HeaderFacet, ID, ConfigurableObject, Action, HeaderAndFooterAction) {
  "use strict";

  var getFooterDefaultActions = HeaderAndFooterAction.getFooterDefaultActions;
  var getHeaderDefaultActions = HeaderAndFooterAction.getHeaderDefaultActions;
  var getActionsFromManifest = Action.getActionsFromManifest;
  var Placement = ConfigurableObject.Placement;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var SectionID = ID.SectionID;
  var CustomSectionID = ID.CustomSectionID;
  var getHeaderFacetsFromManifest = HeaderFacet.getHeaderFacetsFromManifest;
  var getHeaderFacetsFromAnnotations = HeaderFacet.getHeaderFacetsFromAnnotations;
  var createSubSections = SubSection.createSubSections;
  var createCustomSubSections = SubSection.createCustomSubSections;
  var SectionType = ManifestSettings.SectionType;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var getSectionKey = function (facetDefinition, fallback) {
    var _facetDefinition$ID, _facetDefinition$Labe;

    return ((_facetDefinition$ID = facetDefinition.ID) === null || _facetDefinition$ID === void 0 ? void 0 : _facetDefinition$ID.toString()) || ((_facetDefinition$Labe = facetDefinition.Label) === null || _facetDefinition$Labe === void 0 ? void 0 : _facetDefinition$Labe.toString()) || fallback;
  };
  /**
   * Create a section that represents the editable header part, it is only visible in edit mode.
   *
   * @param headerFacets
   * @param converterContext
   * @returns {ObjectPageSection} the section representing the editable header parts
   */


  function createEditableHeaderSection(headerFacets, converterContext) {
    var headerSection = {
      id: "",
      key: "EditableHeaderContent",
      title: "{sap.fe.i18n>T_COMMON_OBJECT_PAGE_HEADER_SECTION}",
      visible: "{= ${ui>/editMode} === 'Editable' }",
      subSections: createSubSections(headerFacets, converterContext)
    };
    return headerSection;
  }
  /**
   * Create an annotation based section.
   *
   * @param facet
   * @param converterContext
   * @returns {ObjectPageSection} the current section
   */


  function createSection(facet, converterContext) {
    var _facet$annotations, _facet$annotations$UI;

    var sectionID = SectionID({
      Facet: facet
    });
    var section = {
      id: sectionID,
      key: getSectionKey(facet, sectionID),
      title: converterContext.getBindingExpression(facet.Label),
      visible: converterContext.getInverseBindingExpression((_facet$annotations = facet.annotations) === null || _facet$annotations === void 0 ? void 0 : (_facet$annotations$UI = _facet$annotations.UI) === null || _facet$annotations$UI === void 0 ? void 0 : _facet$annotations$UI.Hidden, true),
      subSections: createSubSections([facet], converterContext)
    };
    return section;
  }
  /**
   * Create a manifest based custom section.
   *
   * @param customSectionDefinition
   * @param sectionKey
   *
   * @returns {CustomObjectPageSection} the current custom section
   */


  function createCustomSection(customSectionDefinition, sectionKey) {
    var customSectionID = customSectionDefinition.id || CustomSectionID(sectionKey);
    var position = customSectionDefinition.position;

    if (!position) {
      position = {
        placement: Placement.After
      };
    }

    var manifestSubSections;

    if (!customSectionDefinition.subSections) {
      // If there is no subSection defined, we add the content of the custom section as subsections
      // and make sure to set the visibility to 'true', as the actual visibility is handled by the section itself
      manifestSubSections = _defineProperty({}, sectionKey, _objectSpread({}, customSectionDefinition, {
        position: undefined,
        visible: true
      }));
    } else {
      manifestSubSections = customSectionDefinition.subSections;
    }

    var subSections = createCustomSubSections(manifestSubSections);
    var customSection = {
      id: customSectionID,
      key: sectionKey,
      title: customSectionDefinition.title,
      visible: customSectionDefinition.visible !== undefined ? customSectionDefinition.visible : true,
      position: position,
      subSections: insertCustomElements([], subSections, {
        "title": "overwrite",
        "actions": "merge"
      })
    };
    return customSection;
  }

  return {
    convertPage: function (entitySet, converterContext) {
      var _entityType$annotatio, _entityType$annotatio3, _entityType$annotatio4, _entityType$annotatio5;

      var customSections = {};
      var manifestWrapper = converterContext.getManifestWrapper();
      var headerSection;
      var manifestCustomSections = manifestWrapper.getSections();
      var entityType = entitySet.entityType; // Retrieve all header facets (from annotations & custom)

      var headerFacets = insertCustomElements(getHeaderFacetsFromAnnotations(entitySet, converterContext), getHeaderFacetsFromManifest(manifestWrapper.getHeaderFacets())); // Retrieve the page header actions

      var headerActions = insertCustomElements(getHeaderDefaultActions(entitySet, converterContext), getActionsFromManifest(manifestWrapper.getHeaderActions()), {
        isNavigable: "overwrite"
      }); // Retrieve the page footer actions

      var footerActions = insertCustomElements(getFooterDefaultActions(entitySet, manifestWrapper.getViewLevel(), converterContext), getActionsFromManifest(manifestWrapper.getFooterActions()), {
        isNavigable: "overwrite"
      });

      if (manifestWrapper.isHeaderEditable() && ((_entityType$annotatio = entityType.annotations.UI) === null || _entityType$annotatio === void 0 ? void 0 : _entityType$annotatio.HeaderFacets)) {
        var _entityType$annotatio2;

        headerSection = createEditableHeaderSection((_entityType$annotatio2 = entityType.annotations.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : _entityType$annotatio2.HeaderFacets, converterContext);
      } // For each UI.Facet we will create a section


      var objectPageSections = ((_entityType$annotatio3 = entityType.annotations) === null || _entityType$annotatio3 === void 0 ? void 0 : (_entityType$annotatio4 = _entityType$annotatio3.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : (_entityType$annotatio5 = _entityType$annotatio4.Facets) === null || _entityType$annotatio5 === void 0 ? void 0 : _entityType$annotatio5.map(function (facetDefinition) {
        var annotationSection = createSection(facetDefinition, converterContext);

        if (manifestCustomSections[annotationSection.key]) {
          // Add potential override coming from the manifest
          var manifestSectionOverride = manifestCustomSections[annotationSection.key];

          if (manifestSectionOverride.hasOwnProperty("type") && manifestSectionOverride.type === SectionType.XMLFragment || manifestSectionOverride.type === SectionType.Default) {
            // Fully replace the section by a custom section if a type is defined
            annotationSection = createCustomSection(manifestSectionOverride, annotationSection.key);
            delete manifestCustomSections[annotationSection.key];
          }
        }

        return annotationSection;
      })) || [];
      Object.keys(manifestCustomSections).forEach(function (manifestSectionKey) {
        var customSection = manifestCustomSections[manifestSectionKey];
        customSections[manifestSectionKey] = createCustomSection(customSection, manifestSectionKey);
      });
      return {
        template: "ObjectPage",
        headerFacets: headerFacets,
        headerSection: headerSection,
        headerActions: headerActions,
        sections: insertCustomElements(objectPageSections, customSections, {
          "title": "overwrite",
          "visible": "overwrite",
          "subSections": {
            "actions": "merge",
            "title": "overwrite"
          }
        }),
        footerActions: footerActions
      };
    }
  };
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,