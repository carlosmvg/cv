sap.ui.define(["sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingExpression", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/templating/PropertyHelper"], function (MetaModelConverter, BindingExpression, BindingHelper, PropertyHelper) {
  "use strict";

  var _exports = {};
  var isPathExpression = PropertyHelper.isPathExpression;
  var getAssociatedUnitProperty = PropertyHelper.getAssociatedUnitProperty;
  var isReadOnlyExpression = PropertyHelper.isReadOnlyExpression;
  var isNonEditableExpression = PropertyHelper.isNonEditableExpression;
  var isKey = PropertyHelper.isKey;
  var isImmutable = PropertyHelper.isImmutable;
  var isDisabledExpression = PropertyHelper.isDisabledExpression;
  var isComputed = PropertyHelper.isComputed;
  var hasValueHelp = PropertyHelper.hasValueHelp;
  var hasSemanticObject = PropertyHelper.hasSemanticObject;
  var UI = BindingHelper.UI;
  var constant = BindingExpression.constant;
  var bindingExpression = BindingExpression.bindingExpression;
  var or = BindingExpression.or;
  var isConstant = BindingExpression.isConstant;
  var ifElse = BindingExpression.ifElse;
  var equals = BindingExpression.equals;
  var compileBinding = BindingExpression.compileBinding;
  var and = BindingExpression.and;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;

  /**
   * Create the expression to generate an "editable" boolean value.
   *
   * @param {PropertyPath} oPropertyPath the input property
   * @param {boolean} bAsObject whether or not this should be returned as an object or a binding string
   * @returns {string} the binding string
   */
  var getEditableExpression = function (oPropertyPath) {
    var bAsObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return compileBinding(false);
    }

    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath; // Editability depends on the field control expression
    // If the Field control is statically in ReadOnly or Inapplicable (disabled) -> not editable
    // If the property is a key -> not editable except in creation if not computed
    // If the property is computed -> not editable
    // If the property is immutable -> not editable except in creation
    // If the property has a SemanticObject and no ValueList defined -> not editable
    // If the Field control is a path resolving to ReadOnly or Inapplicable (disabled) (<= 1) -> not editable
    // Else, to be editable you need
    // immutable and key while in the creation row
    // ui/isEditable

    var editableExpression = ifElse(or(isComputed(oProperty), isKey(oProperty), isImmutable(oProperty), hasSemanticObject(oProperty) && !hasValueHelp(oProperty), isNonEditableExpression(oProperty)), ifElse(isImmutable(oProperty) || isKey(oProperty) && !isComputed(oProperty), UI.IsTransientBinding, false), UI.IsEditable);

    if (bAsObject) {
      return editableExpression;
    }

    return compileBinding(editableExpression);
  };

  _exports.getEditableExpression = getEditableExpression;

  var getUpdatableExpression = function (oUpdateRestrictions, oPropertyPath) {
    var _oUpdateRestrictions$;

    var oUpdatable = true; // if the field comes from a navigation entity, then the entity must be added to the path of updatable

    var sPath = isPathExpression(oPropertyPath) ? oPropertyPath.path : "";
    var sSource = sPath.indexOf("/") > -1 ? sPath.split("/")[0] : "";

    if (typeof oUpdateRestrictions.Updatable === "boolean") {
      oUpdatable = constant(oUpdateRestrictions.Updatable);
    } else if ((_oUpdateRestrictions$ = oUpdateRestrictions.Updatable) === null || _oUpdateRestrictions$ === void 0 ? void 0 : _oUpdateRestrictions$.$Path) {
      var _oUpdateRestrictions$2;

      var sUpdatablePath = (sSource ? sSource + "/" : "") + ((_oUpdateRestrictions$2 = oUpdateRestrictions.Updatable) === null || _oUpdateRestrictions$2 === void 0 ? void 0 : _oUpdateRestrictions$2.$Path);
      oUpdatable = bindingExpression(sUpdatablePath);
    }

    return equals(oUpdatable, constant(true));
  };
  /**
   * Create the expression to generate an "enabled" boolean value.
   *
   * @param {PropertyPath} oPropertyPath the input property
   * @param {boolean} bAsObject whether or not this should be returned as an object or a binding string
   * @returns {string} the binding string
   */


  _exports.getUpdatableExpression = getUpdatableExpression;

  var getEnabledExpression = function (oPropertyPath) {
    var bAsObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return compileBinding(true);
    }

    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath; // Enablement depends on the field control expression
    // If the Field control is statically in Inapplicable (disabled) -> not enabled

    var enabledExpression = ifElse(isDisabledExpression(oProperty), false, true);

    if (bAsObject) {
      return enabledExpression;
    }

    return compileBinding(enabledExpression);
  };
  /**
   * Create the expression to generate an "editMode" enum value.
   * @param {PropertyPath} oPropertyPath the input property
   * @param {string} sStaticEditMode a potentially static outside editmode
   * @param {string} sUsageContext the context in which this is used
   * @param {boolean} bAsObject return this as a BindingPart
   * @param oUpdateRestrictions
   * @returns {BindingExpression<string> | BindingPart<string>} the binding string or part
   */


  _exports.getEnabledExpression = getEnabledExpression;

  var getEditMode = function (oPropertyPath) {
    var sStaticEditMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var sUsageContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
    var bAsObject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var oUpdateRestrictions = arguments.length > 4 ? arguments[4] : undefined;

    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return "Display";
    }

    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath; // if the property is not enabled => Disabled
    // if the property is enabled && not editable => ReadOnly
    // if the property is enabled && editable => Editable
    // If there is an associated unit, and it has a field control also use consider the following
    // if the unit field control is readonly -> EditableReadOnly
    // otherwise -> Editable

    if (sStaticEditMode === "Display" || sStaticEditMode === "ReadOnly" || sStaticEditMode === "Disabled") {
      return compileBinding(sStaticEditMode);
    }

    var editableExpression = getEditableExpression(oPropertyPath, true);

    if (sStaticEditMode === "Editable") {
      // If we're statically Editable this means we expect to be creatable
      editableExpression = ifElse(or(isComputed(oProperty), hasSemanticObject(oProperty) && !hasValueHelp(oProperty)), false, true);
    } else if (sUsageContext === "CreationRow") {
      editableExpression = ifElse(or(isComputed(oProperty), hasSemanticObject(oProperty) && !hasValueHelp(oProperty), isNonEditableExpression(oProperty)), false, UI.IsEditable);
    }

    var enabledExpression = getEnabledExpression(oPropertyPath, true);
    var unitProperty = getAssociatedUnitProperty(oProperty);
    var resultExpression = "Editable";

    if (unitProperty) {
      resultExpression = ifElse(or(isReadOnlyExpression(unitProperty), isComputed(unitProperty)), "EditableReadOnly", "Editable");
    }

    var readOnlyExpression = isReadOnlyExpression(oProperty);
    var editModeExpression = ifElse(enabledExpression, ifElse(editableExpression, resultExpression, ifElse(and(!isConstant(readOnlyExpression) && readOnlyExpression, UI.IsEditable), "ReadOnly", "Display")), "Disabled");

    if (oUpdateRestrictions) {
      // if the property is from a non-updatable entity => Read only mode, previously calculated edit Mode is ignored
      // if the property is from an updatable entity => previously calculated edit Mode expression
      var oUpdatableExp = getUpdatableExpression(oUpdateRestrictions, oPropertyPath);
      editModeExpression = ifElse(oUpdatableExp, editModeExpression, "Display");
    }

    if (bAsObject) {
      return editModeExpression;
    }

    return compileBinding(editModeExpression);
  };

  _exports.getEditMode = getEditMode;

  var getFieldDisplay = function (oPropertyPath, oEntityPath) {
    var _oProperty$annotation, _oProperty$annotation2, _oTextAnnotation$anno, _oTextAnnotation$anno2, _oEntitySet$entityTyp, _oEntitySet$entityTyp2, _oEntitySet$entityTyp3;

    var sStaticEditMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
    var sUsageContext = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
    var oUpdateRestrictions = arguments.length > 4 ? arguments[4] : undefined;

    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return "Display";
    }

    var oProperty = isPathExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    var oEntitySet = isPathExpression(oEntityPath) && oEntityPath.$target || oEntityPath;
    var oTextAnnotation = (_oProperty$annotation = oProperty.annotations) === null || _oProperty$annotation === void 0 ? void 0 : (_oProperty$annotation2 = _oProperty$annotation.Common) === null || _oProperty$annotation2 === void 0 ? void 0 : _oProperty$annotation2.Text;
    var oTextArrangementAnnotation = (oTextAnnotation === null || oTextAnnotation === void 0 ? void 0 : (_oTextAnnotation$anno = oTextAnnotation.annotations) === null || _oTextAnnotation$anno === void 0 ? void 0 : (_oTextAnnotation$anno2 = _oTextAnnotation$anno.UI) === null || _oTextAnnotation$anno2 === void 0 ? void 0 : _oTextAnnotation$anno2.TextArrangement) || (oEntitySet === null || oEntitySet === void 0 ? void 0 : (_oEntitySet$entityTyp = oEntitySet.entityType) === null || _oEntitySet$entityTyp === void 0 ? void 0 : (_oEntitySet$entityTyp2 = _oEntitySet$entityTyp.annotations) === null || _oEntitySet$entityTyp2 === void 0 ? void 0 : (_oEntitySet$entityTyp3 = _oEntitySet$entityTyp2.UI) === null || _oEntitySet$entityTyp3 === void 0 ? void 0 : _oEntitySet$entityTyp3.TextArrangement);
    var sDisplayValue = oTextAnnotation ? "DescriptionValue" : "Value";

    if (oTextAnnotation && oTextArrangementAnnotation) {
      if (oTextArrangementAnnotation === "UI.TextArrangementType/TextOnly") {
        sDisplayValue = "Description";
      } else if (oTextArrangementAnnotation === "UI.TextArrangementType/TextLast") {
        sDisplayValue = "ValueDescription";
      } else {
        //Default should be TextFirst if there is a Text annotation and neither TextOnly nor TextLast are set
        sDisplayValue = "DescriptionValue";
      }
    }

    if (hasValueHelp(oProperty)) {
      // Predefined display mode
      return compileBinding(sDisplayValue);
    } else {
      if (sDisplayValue !== "Description" && sUsageContext === "VHTable") {
        sDisplayValue = "Value";
      }

      return compileBinding(ifElse(equals(getEditMode(oPropertyPath, sStaticEditMode, sUsageContext, true, oUpdateRestrictions), "Editable"), "Value", sDisplayValue));
    }
  };
  /**
   * Formatter helper to retrieve the converterContext from the metamodel context.
   *
   * @param {Context} oContext the original metamodel context
   * @param {object} oInterface the current templating context
   * @returns {object} the converter context representing that object
   */


  _exports.getFieldDisplay = getFieldDisplay;

  var getConverterContext = function (oContext, oInterface) {
    if (oInterface && oInterface.context) {
      return convertMetaModelContext(oInterface.context);
    }

    return null;
  };

  getConverterContext.requiresIContext = true;
  _exports.getConverterContext = getConverterContext;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,